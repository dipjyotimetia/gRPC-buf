// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: product/product_api.proto

package productsServicev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	product "github.com/grpc-buf/internal/gen/product"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProductsServiceName is the fully-qualified name of the ProductsService service.
	ProductsServiceName = "rpc.productsService.v1.ProductsService"
)

// ProductsServiceClient is a client for the rpc.productsService.v1.ProductsService service.
type ProductsServiceClient interface {
	Create(context.Context, *connect_go.Request[product.CreateReq]) (*connect_go.Response[product.CreateRes], error)
	Update(context.Context, *connect_go.Request[product.UpdateReq]) (*connect_go.Response[product.UpdateRes], error)
	GetByID(context.Context, *connect_go.Request[product.GetByIDReq]) (*connect_go.Response[product.GetByIDRes], error)
	Search(context.Context, *connect_go.Request[product.SearchReq]) (*connect_go.Response[product.SearchRes], error)
}

// NewProductsServiceClient constructs a client for the rpc.productsService.v1.ProductsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProductsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productsServiceClient{
		create: connect_go.NewClient[product.CreateReq, product.CreateRes](
			httpClient,
			baseURL+"/rpc.productsService.v1.ProductsService/Create",
			opts...,
		),
		update: connect_go.NewClient[product.UpdateReq, product.UpdateRes](
			httpClient,
			baseURL+"/rpc.productsService.v1.ProductsService/Update",
			opts...,
		),
		getByID: connect_go.NewClient[product.GetByIDReq, product.GetByIDRes](
			httpClient,
			baseURL+"/rpc.productsService.v1.ProductsService/GetByID",
			opts...,
		),
		search: connect_go.NewClient[product.SearchReq, product.SearchRes](
			httpClient,
			baseURL+"/rpc.productsService.v1.ProductsService/Search",
			opts...,
		),
	}
}

// productsServiceClient implements ProductsServiceClient.
type productsServiceClient struct {
	create  *connect_go.Client[product.CreateReq, product.CreateRes]
	update  *connect_go.Client[product.UpdateReq, product.UpdateRes]
	getByID *connect_go.Client[product.GetByIDReq, product.GetByIDRes]
	search  *connect_go.Client[product.SearchReq, product.SearchRes]
}

// Create calls rpc.productsService.v1.ProductsService.Create.
func (c *productsServiceClient) Create(ctx context.Context, req *connect_go.Request[product.CreateReq]) (*connect_go.Response[product.CreateRes], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls rpc.productsService.v1.ProductsService.Update.
func (c *productsServiceClient) Update(ctx context.Context, req *connect_go.Request[product.UpdateReq]) (*connect_go.Response[product.UpdateRes], error) {
	return c.update.CallUnary(ctx, req)
}

// GetByID calls rpc.productsService.v1.ProductsService.GetByID.
func (c *productsServiceClient) GetByID(ctx context.Context, req *connect_go.Request[product.GetByIDReq]) (*connect_go.Response[product.GetByIDRes], error) {
	return c.getByID.CallUnary(ctx, req)
}

// Search calls rpc.productsService.v1.ProductsService.Search.
func (c *productsServiceClient) Search(ctx context.Context, req *connect_go.Request[product.SearchReq]) (*connect_go.Response[product.SearchRes], error) {
	return c.search.CallUnary(ctx, req)
}

// ProductsServiceHandler is an implementation of the rpc.productsService.v1.ProductsService
// service.
type ProductsServiceHandler interface {
	Create(context.Context, *connect_go.Request[product.CreateReq]) (*connect_go.Response[product.CreateRes], error)
	Update(context.Context, *connect_go.Request[product.UpdateReq]) (*connect_go.Response[product.UpdateRes], error)
	GetByID(context.Context, *connect_go.Request[product.GetByIDReq]) (*connect_go.Response[product.GetByIDRes], error)
	Search(context.Context, *connect_go.Request[product.SearchReq]) (*connect_go.Response[product.SearchRes], error)
}

// NewProductsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductsServiceHandler(svc ProductsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/rpc.productsService.v1.ProductsService/Create", connect_go.NewUnaryHandler(
		"/rpc.productsService.v1.ProductsService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/rpc.productsService.v1.ProductsService/Update", connect_go.NewUnaryHandler(
		"/rpc.productsService.v1.ProductsService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/rpc.productsService.v1.ProductsService/GetByID", connect_go.NewUnaryHandler(
		"/rpc.productsService.v1.ProductsService/GetByID",
		svc.GetByID,
		opts...,
	))
	mux.Handle("/rpc.productsService.v1.ProductsService/Search", connect_go.NewUnaryHandler(
		"/rpc.productsService.v1.ProductsService/Search",
		svc.Search,
		opts...,
	))
	return "/rpc.productsService.v1.ProductsService/", mux
}

// UnimplementedProductsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductsServiceHandler struct{}

func (UnimplementedProductsServiceHandler) Create(context.Context, *connect_go.Request[product.CreateReq]) (*connect_go.Response[product.CreateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.productsService.v1.ProductsService.Create is not implemented"))
}

func (UnimplementedProductsServiceHandler) Update(context.Context, *connect_go.Request[product.UpdateReq]) (*connect_go.Response[product.UpdateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.productsService.v1.ProductsService.Update is not implemented"))
}

func (UnimplementedProductsServiceHandler) GetByID(context.Context, *connect_go.Request[product.GetByIDReq]) (*connect_go.Response[product.GetByIDRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.productsService.v1.ProductsService.GetByID is not implemented"))
}

func (UnimplementedProductsServiceHandler) Search(context.Context, *connect_go.Request[product.SearchReq]) (*connect_go.Response[product.SearchRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.productsService.v1.ProductsService.Search is not implemented"))
}
