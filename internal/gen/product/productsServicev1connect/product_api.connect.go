// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: product/product_api.proto

package productsservicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	product "github.com/grpc-buf/internal/gen/product"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ProductsServiceName is the fully-qualified name of the ProductsService service.
	ProductsServiceName = "rpc.productsservice.v1.ProductsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductsServiceCreateProcedure is the fully-qualified name of the ProductsService's Create RPC.
	ProductsServiceCreateProcedure = "/rpc.productsservice.v1.ProductsService/Create"
	// ProductsServiceUpdateProcedure is the fully-qualified name of the ProductsService's Update RPC.
	ProductsServiceUpdateProcedure = "/rpc.productsservice.v1.ProductsService/Update"
	// ProductsServiceGetByIDProcedure is the fully-qualified name of the ProductsService's GetByID RPC.
	ProductsServiceGetByIDProcedure = "/rpc.productsservice.v1.ProductsService/GetByID"
	// ProductsServiceSearchProcedure is the fully-qualified name of the ProductsService's Search RPC.
	ProductsServiceSearchProcedure = "/rpc.productsservice.v1.ProductsService/Search"
)

// ProductsServiceClient is a client for the rpc.productsservice.v1.ProductsService service.
type ProductsServiceClient interface {
	Create(context.Context, *connect.Request[product.CreateReq]) (*connect.Response[product.CreateRes], error)
	Update(context.Context, *connect.Request[product.UpdateReq]) (*connect.Response[product.UpdateRes], error)
	GetByID(context.Context, *connect.Request[product.GetByIDReq]) (*connect.Response[product.GetByIDRes], error)
	Search(context.Context, *connect.Request[product.SearchReq]) (*connect.Response[product.SearchRes], error)
}

// NewProductsServiceClient constructs a client for the rpc.productsservice.v1.ProductsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productsServiceClient{
		create: connect.NewClient[product.CreateReq, product.CreateRes](
			httpClient,
			baseURL+ProductsServiceCreateProcedure,
			opts...,
		),
		update: connect.NewClient[product.UpdateReq, product.UpdateRes](
			httpClient,
			baseURL+ProductsServiceUpdateProcedure,
			opts...,
		),
		getByID: connect.NewClient[product.GetByIDReq, product.GetByIDRes](
			httpClient,
			baseURL+ProductsServiceGetByIDProcedure,
			opts...,
		),
		search: connect.NewClient[product.SearchReq, product.SearchRes](
			httpClient,
			baseURL+ProductsServiceSearchProcedure,
			opts...,
		),
	}
}

// productsServiceClient implements ProductsServiceClient.
type productsServiceClient struct {
	create  *connect.Client[product.CreateReq, product.CreateRes]
	update  *connect.Client[product.UpdateReq, product.UpdateRes]
	getByID *connect.Client[product.GetByIDReq, product.GetByIDRes]
	search  *connect.Client[product.SearchReq, product.SearchRes]
}

// Create calls rpc.productsservice.v1.ProductsService.Create.
func (c *productsServiceClient) Create(ctx context.Context, req *connect.Request[product.CreateReq]) (*connect.Response[product.CreateRes], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls rpc.productsservice.v1.ProductsService.Update.
func (c *productsServiceClient) Update(ctx context.Context, req *connect.Request[product.UpdateReq]) (*connect.Response[product.UpdateRes], error) {
	return c.update.CallUnary(ctx, req)
}

// GetByID calls rpc.productsservice.v1.ProductsService.GetByID.
func (c *productsServiceClient) GetByID(ctx context.Context, req *connect.Request[product.GetByIDReq]) (*connect.Response[product.GetByIDRes], error) {
	return c.getByID.CallUnary(ctx, req)
}

// Search calls rpc.productsservice.v1.ProductsService.Search.
func (c *productsServiceClient) Search(ctx context.Context, req *connect.Request[product.SearchReq]) (*connect.Response[product.SearchRes], error) {
	return c.search.CallUnary(ctx, req)
}

// ProductsServiceHandler is an implementation of the rpc.productsservice.v1.ProductsService
// service.
type ProductsServiceHandler interface {
	Create(context.Context, *connect.Request[product.CreateReq]) (*connect.Response[product.CreateRes], error)
	Update(context.Context, *connect.Request[product.UpdateReq]) (*connect.Response[product.UpdateRes], error)
	GetByID(context.Context, *connect.Request[product.GetByIDReq]) (*connect.Response[product.GetByIDRes], error)
	Search(context.Context, *connect.Request[product.SearchReq]) (*connect.Response[product.SearchRes], error)
}

// NewProductsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductsServiceHandler(svc ProductsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productsServiceCreateHandler := connect.NewUnaryHandler(
		ProductsServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	productsServiceUpdateHandler := connect.NewUnaryHandler(
		ProductsServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	productsServiceGetByIDHandler := connect.NewUnaryHandler(
		ProductsServiceGetByIDProcedure,
		svc.GetByID,
		opts...,
	)
	productsServiceSearchHandler := connect.NewUnaryHandler(
		ProductsServiceSearchProcedure,
		svc.Search,
		opts...,
	)
	return "/rpc.productsservice.v1.ProductsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductsServiceCreateProcedure:
			productsServiceCreateHandler.ServeHTTP(w, r)
		case ProductsServiceUpdateProcedure:
			productsServiceUpdateHandler.ServeHTTP(w, r)
		case ProductsServiceGetByIDProcedure:
			productsServiceGetByIDHandler.ServeHTTP(w, r)
		case ProductsServiceSearchProcedure:
			productsServiceSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductsServiceHandler struct{}

func (UnimplementedProductsServiceHandler) Create(context.Context, *connect.Request[product.CreateReq]) (*connect.Response[product.CreateRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.productsservice.v1.ProductsService.Create is not implemented"))
}

func (UnimplementedProductsServiceHandler) Update(context.Context, *connect.Request[product.UpdateReq]) (*connect.Response[product.UpdateRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.productsservice.v1.ProductsService.Update is not implemented"))
}

func (UnimplementedProductsServiceHandler) GetByID(context.Context, *connect.Request[product.GetByIDReq]) (*connect.Response[product.GetByIDRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.productsservice.v1.ProductsService.GetByID is not implemented"))
}

func (UnimplementedProductsServiceHandler) Search(context.Context, *connect.Request[product.SearchReq]) (*connect.Response[product.SearchRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.productsservice.v1.ProductsService.Search is not implemented"))
}
