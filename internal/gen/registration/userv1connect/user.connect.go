// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: registration/user.proto

package userv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	registration "github.com/grpc-buf/internal/gen/registration"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "rpc.user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceRegisterUserProcedure is the fully-qualified name of the UserService's RegisterUser
	// RPC.
	UserServiceRegisterUserProcedure = "/rpc.user.v1.UserService/RegisterUser"
	// UserServiceLoginUserProcedure is the fully-qualified name of the UserService's LoginUser RPC.
	UserServiceLoginUserProcedure = "/rpc.user.v1.UserService/LoginUser"
)

// UserServiceClient is a client for the rpc.user.v1.UserService service.
type UserServiceClient interface {
	RegisterUser(context.Context, *connect_go.Request[registration.RegisterRequest]) (*connect_go.Response[registration.RegisterResponse], error)
	LoginUser(context.Context, *connect_go.Request[registration.LoginRequest]) (*connect_go.Response[registration.LoginResponse], error)
}

// NewUserServiceClient constructs a client for the rpc.user.v1.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		registerUser: connect_go.NewClient[registration.RegisterRequest, registration.RegisterResponse](
			httpClient,
			baseURL+UserServiceRegisterUserProcedure,
			opts...,
		),
		loginUser: connect_go.NewClient[registration.LoginRequest, registration.LoginResponse](
			httpClient,
			baseURL+UserServiceLoginUserProcedure,
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	registerUser *connect_go.Client[registration.RegisterRequest, registration.RegisterResponse]
	loginUser    *connect_go.Client[registration.LoginRequest, registration.LoginResponse]
}

// RegisterUser calls rpc.user.v1.UserService.RegisterUser.
func (c *userServiceClient) RegisterUser(ctx context.Context, req *connect_go.Request[registration.RegisterRequest]) (*connect_go.Response[registration.RegisterResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// LoginUser calls rpc.user.v1.UserService.LoginUser.
func (c *userServiceClient) LoginUser(ctx context.Context, req *connect_go.Request[registration.LoginRequest]) (*connect_go.Response[registration.LoginResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the rpc.user.v1.UserService service.
type UserServiceHandler interface {
	RegisterUser(context.Context, *connect_go.Request[registration.RegisterRequest]) (*connect_go.Response[registration.RegisterResponse], error)
	LoginUser(context.Context, *connect_go.Request[registration.LoginRequest]) (*connect_go.Response[registration.LoginResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(UserServiceRegisterUserProcedure, connect_go.NewUnaryHandler(
		UserServiceRegisterUserProcedure,
		svc.RegisterUser,
		opts...,
	))
	mux.Handle(UserServiceLoginUserProcedure, connect_go.NewUnaryHandler(
		UserServiceLoginUserProcedure,
		svc.LoginUser,
		opts...,
	))
	return "/rpc.user.v1.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) RegisterUser(context.Context, *connect_go.Request[registration.RegisterRequest]) (*connect_go.Response[registration.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.user.v1.UserService.RegisterUser is not implemented"))
}

func (UnimplementedUserServiceHandler) LoginUser(context.Context, *connect_go.Request[registration.LoginRequest]) (*connect_go.Response[registration.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.user.v1.UserService.LoginUser is not implemented"))
}
