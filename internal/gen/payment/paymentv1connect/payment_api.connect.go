// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: payment/payment_api.proto

package paymentv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	payment "github.com/grpc-buf/internal/gen/payment"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PaymentName is the fully-qualified name of the Payment service.
	PaymentName = "rpc.payment.v1.Payment"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentMakePaymentProcedure is the fully-qualified name of the Payment's MakePayment RPC.
	PaymentMakePaymentProcedure = "/rpc.payment.v1.Payment/MakePayment"
	// PaymentMarkInvoicePaidProcedure is the fully-qualified name of the Payment's MarkInvoicePaid RPC.
	PaymentMarkInvoicePaidProcedure = "/rpc.payment.v1.Payment/MarkInvoicePaid"
	// PaymentPayInvoiceProcedure is the fully-qualified name of the Payment's PayInvoice RPC.
	PaymentPayInvoiceProcedure = "/rpc.payment.v1.Payment/PayInvoice"
)

// PaymentClient is a client for the rpc.payment.v1.Payment service.
type PaymentClient interface {
	MakePayment(context.Context, *connect_go.Request[payment.PaymentRequest]) (*connect_go.Response[payment.PaymentResponse], error)
	MarkInvoicePaid(context.Context, *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error)
	PayInvoice(context.Context, *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error)
}

// NewPaymentClient constructs a client for the rpc.payment.v1.Payment service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PaymentClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &paymentClient{
		makePayment: connect_go.NewClient[payment.PaymentRequest, payment.PaymentResponse](
			httpClient,
			baseURL+PaymentMakePaymentProcedure,
			opts...,
		),
		markInvoicePaid: connect_go.NewClient[payment.Invoice, payment.Invoice](
			httpClient,
			baseURL+PaymentMarkInvoicePaidProcedure,
			opts...,
		),
		payInvoice: connect_go.NewClient[payment.Invoice, payment.Invoice](
			httpClient,
			baseURL+PaymentPayInvoiceProcedure,
			opts...,
		),
	}
}

// paymentClient implements PaymentClient.
type paymentClient struct {
	makePayment     *connect_go.Client[payment.PaymentRequest, payment.PaymentResponse]
	markInvoicePaid *connect_go.Client[payment.Invoice, payment.Invoice]
	payInvoice      *connect_go.Client[payment.Invoice, payment.Invoice]
}

// MakePayment calls rpc.payment.v1.Payment.MakePayment.
func (c *paymentClient) MakePayment(ctx context.Context, req *connect_go.Request[payment.PaymentRequest]) (*connect_go.Response[payment.PaymentResponse], error) {
	return c.makePayment.CallUnary(ctx, req)
}

// MarkInvoicePaid calls rpc.payment.v1.Payment.MarkInvoicePaid.
func (c *paymentClient) MarkInvoicePaid(ctx context.Context, req *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error) {
	return c.markInvoicePaid.CallUnary(ctx, req)
}

// PayInvoice calls rpc.payment.v1.Payment.PayInvoice.
func (c *paymentClient) PayInvoice(ctx context.Context, req *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error) {
	return c.payInvoice.CallUnary(ctx, req)
}

// PaymentHandler is an implementation of the rpc.payment.v1.Payment service.
type PaymentHandler interface {
	MakePayment(context.Context, *connect_go.Request[payment.PaymentRequest]) (*connect_go.Response[payment.PaymentResponse], error)
	MarkInvoicePaid(context.Context, *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error)
	PayInvoice(context.Context, *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error)
}

// NewPaymentHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentHandler(svc PaymentHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PaymentMakePaymentProcedure, connect_go.NewUnaryHandler(
		PaymentMakePaymentProcedure,
		svc.MakePayment,
		opts...,
	))
	mux.Handle(PaymentMarkInvoicePaidProcedure, connect_go.NewUnaryHandler(
		PaymentMarkInvoicePaidProcedure,
		svc.MarkInvoicePaid,
		opts...,
	))
	mux.Handle(PaymentPayInvoiceProcedure, connect_go.NewUnaryHandler(
		PaymentPayInvoiceProcedure,
		svc.PayInvoice,
		opts...,
	))
	return "/rpc.payment.v1.Payment/", mux
}

// UnimplementedPaymentHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentHandler struct{}

func (UnimplementedPaymentHandler) MakePayment(context.Context, *connect_go.Request[payment.PaymentRequest]) (*connect_go.Response[payment.PaymentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.payment.v1.Payment.MakePayment is not implemented"))
}

func (UnimplementedPaymentHandler) MarkInvoicePaid(context.Context, *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.payment.v1.Payment.MarkInvoicePaid is not implemented"))
}

func (UnimplementedPaymentHandler) PayInvoice(context.Context, *connect_go.Request[payment.Invoice]) (*connect_go.Response[payment.Invoice], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.payment.v1.Payment.PayInvoice is not implemented"))
}
